import { readCertificate, readCertificatePEM } from "node-opcua-crypto";
import { messageLogger } from "node-opcua-debug";
import * as sinon from "sinon";
import * as path from "path";
import "should";
import { verifyIsOPCUAValidCertificate } from "..";

// note: faulty  certificates can be generated by https://certificatetools.com/
describe("Should verify certificate", function (this: any) {
    this.timeout(10000);
    it("CERT1 - faulty_certificate", async () => {
        const certificateFile = path.join(__dirname, "./fixtures/faulty_certificate.pem");
        const certificate = readCertificate(certificateFile);

        const spyFunc = sinon.spy();
        messageLogger.on("warningMessage", spyFunc);

        verifyIsOPCUAValidCertificate(certificate, certificateFile, "server", "ApplicationUri");

        const msg = spyFunc
            .getCalls()
            .map((x) => x.args[0])
            .join(" ");

        msg.should.match(/.*\[NODE-OPCUA-W06\] The certificate subjectAltName does not match the server applicationUri.*/);
        msg.should.match(
            /.*\[NODE-OPCUA-W16\] The certificate keyUsage must include digitalSignature, nonRepudiation, keyEncipherment and dataEncipherment\..*/
        );
    });
    it("CERT2 - faulty_certificate_missing_subjectAltName.pem", async () => {
        const certificateFile = path.join(__dirname, "./fixtures/faulty_certificate_missing_subjectAltName.pem");
        const certificate = readCertificate(certificateFile);

        const spyFunc = sinon.spy();
        messageLogger.on("warningMessage", spyFunc);

        verifyIsOPCUAValidCertificate(certificate, certificateFile, "server", "ApplicationUri");

        const msg = spyFunc
            .getCalls()
            .map((x) => x.args[0])
            .join(" ");

        msg.
        should.match(/.*\[NODE-OPCUA-W14\] The certificate subjectAltName uniformResourceIdentifier is missing.*/);
    });
});
